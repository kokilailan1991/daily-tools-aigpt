// PDF Export functionality using jsPDF
import jsPDF from 'jspdf'

interface ExportData {
  toolName: string
  inputs: { [key: string]: any }
  results: { [key: string]: any }
  timestamp: Date
  userNotes?: string
}

export class PDFExporter {
  private doc: jsPDF

  constructor() {
    this.doc = new jsPDF()
  }

  // Export calculation results to PDF
  exportCalculation(data: ExportData) {
    const { toolName, inputs, results, timestamp, userNotes } = data
    
    // Set up document
    this.doc.setFontSize(20)
    this.doc.text(toolName, 20, 30)
    
    // Add timestamp
    this.doc.setFontSize(10)
    this.doc.text(`Generated on: ${timestamp.toLocaleDateString()} at ${timestamp.toLocaleTimeString()}`, 20, 45)
    
    // Add inputs section
    this.doc.setFontSize(16)
    this.doc.text('Input Parameters:', 20, 65)
    
    this.doc.setFontSize(12)
    let yPosition = 80
    Object.entries(inputs).forEach(([key, value]) => {
      this.doc.text(`${key}: ${value}`, 30, yPosition)
      yPosition += 10
    })
    
    // Add results section
    yPosition += 10
    this.doc.setFontSize(16)
    this.doc.text('Calculation Results:', 20, yPosition)
    
    this.doc.setFontSize(12)
    yPosition += 15
    Object.entries(results).forEach(([key, value]) => {
      this.doc.setFont('helvetica', 'bold')
      this.doc.text(`${key}:`, 30, yPosition)
      this.doc.setFont('helvetica', 'normal')
      this.doc.text(`${value}`, 80, yPosition)
      yPosition += 10
    })
    
    // Add user notes if provided
    if (userNotes) {
      yPosition += 10
      this.doc.setFontSize(16)
      this.doc.text('Notes:', 20, yPosition)
      
      this.doc.setFontSize(12)
      yPosition += 15
      const splitNotes = this.doc.splitTextToSize(userNotes, 170)
      this.doc.text(splitNotes, 30, yPosition)
    }
    
    // Add footer
    const pageHeight = this.doc.internal.pageSize.height
    this.doc.setFontSize(8)
    this.doc.text('Generated by Daily Tools - https://tools.aigpt.co.in', 20, pageHeight - 20)
    
    return this.doc
  }

  // Export multiple calculations
  exportMultipleCalculations(calculations: ExportData[]) {
    calculations.forEach((calc, index) => {
      if (index > 0) {
        this.doc.addPage()
      }
      this.exportCalculation(calc)
    })
    
    return this.doc
  }

  // Download PDF
  download(filename: string = 'calculation-results.pdf') {
    this.doc.save(filename)
  }

  // Get PDF as blob for preview
  getBlob(): Blob {
    return this.doc.output('blob')
  }
}

// Utility function for easy PDF export
export const exportToPDF = (data: ExportData, filename?: string) => {
  const exporter = new PDFExporter()
  exporter.exportCalculation(data)
  exporter.download(filename)
}

// Export function for specific tools
export const exportToolResults = {
  // BMI Calculator
  bmi: (height: number, weight: number, bmi: number, category: string) => {
    exportToPDF({
      toolName: 'BMI Calculator',
      inputs: { Height: `${height} cm`, Weight: `${weight} kg` },
      results: { BMI: bmi.toFixed(2), Category: category },
      timestamp: new Date()
    }, 'bmi-calculation.pdf')
  },

  // Loan EMI Calculator
  emi: (principal: number, rate: number, tenure: number, emi: number, totalInterest: number) => {
    exportToPDF({
      toolName: 'Loan EMI Calculator',
      inputs: {
        'Principal Amount': `₹${principal.toLocaleString()}`,
        'Interest Rate': `${rate}% per annum`,
        'Loan Tenure': `${tenure} months`
      },
      results: {
        'Monthly EMI': `₹${emi.toLocaleString()}`,
        'Total Interest': `₹${totalInterest.toLocaleString()}`,
        'Total Amount': `₹${(principal + totalInterest).toLocaleString()}`
      },
      timestamp: new Date()
    }, 'loan-emi-calculation.pdf')
  },

  // Risk Calculator
  risk: (age: number, lumpSum: number, monthlySIP: number, years: number, results: any) => {
    exportToPDF({
      toolName: 'Risk Calculator',
      inputs: {
        Age: `${age} years`,
        'Lump Sum Investment': `₹${lumpSum.toLocaleString()}`,
        'Monthly SIP': `₹${monthlySIP.toLocaleString()}`,
        'Investment Period': `${years} years`
      },
      results: results,
      timestamp: new Date()
    }, 'risk-calculation.pdf')
  }
}
